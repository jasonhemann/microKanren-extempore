;; Jason Hemann and Dan Friedman 
;; microKanren + miniKanren in extempore
;; Version taken from https://github.com/jasonhemann/Roll-Your-Own-Relational-DSL

;; microKanren core
(define (var n) n)
(define (var? n) (number? n))

(define (ext-s x v s) (cons (cons x v) s))
(define (walk u s)
  (let ((pr (and (var? u) (assv u s))))
    (if pr (walk (cdr pr) s) u)))

(define (unify u v s)
  (let ((u (walk u s)) (v (walk v s)))
    (cond
      ((eqv? u v) s)
      ((var? u) (ext-s u v s))
      ((var? v) (ext-s v u s))
      ((and (pair? u) (pair? v))
       (let ((s (unify (car u) (car v) s)))
         (and s (unify (cdr u) (cdr v) s))))
      (else #f))))

(define (== u v)
  (lambda (s/c)
    (let ((s (unify u v (car s/c))))
      (if s (list (cons s (cdr s/c))) `()))))

(define (call/fresh f)
  (lambda (s/c)
    (let ((c (cdr s/c)))
      ((f (var c)) (cons (car s/c) (+ 1 c))))))

(define (disj g1 g2) (lambda (s/c) ($-append (g1 s/c) (g2 s/c))))
(define (conj g1 g2) (lambda (s/c) ($-append-map g2 (g1 s/c))))

(define ($-append $1 $2)
  (cond
    ((procedure? $1) (lambda () ($-append $2 ($1))))
    ((null? $1) $2)
    (else (cons (car $1) ($-append (cdr $1) $2)))))
(define ($-append-map g $)
  (cond
    ((procedure? $) (lambda () ($-append-map g ($))))
    ((null? $) `())
    (else ($-append (g (car $)) ($-append-map g (cdr $))))))

(define (call/empty-state g) (g  (cons '() 0)))

;; Tests of core
(call/empty-state (== #t #t))
(call/empty-state (== #t #f))

(call/empty-state (call/fresh (lambda (x) (== x 'cat))))

(call/empty-state
  (call/fresh
    (lambda (x)
      (disj
        (== x 'cat)
        (== x 'dog)))))

(define hot-dogs
  (lambda (meal)
    (disj
      (== meal 'dog)
      (call/fresh
        (lambda (res)
	  (conj
	    (== `(hot . ,res) meal)
	    (lambda (s/c)
	      (lambda ()
		((hot-dogs res) s/c)))))))))

(call/empty-state (call/fresh hot-dogs))

((cdr (call/empty-state (call/fresh hot-dogs))))

((cdr ((cdr (call/empty-state (call/fresh hot-dogs))))))

(define appendo
  (lambda (l s out)
    (disj
     (conj (== '() l) (== s out))
     (call/fresh
      (lambda (a)
        (call/fresh
         (lambda (d)
           (conj
            (== `(,a . ,d) l)
            (call/fresh
             (lambda (res)
               (conj
                (== `(,a . ,res) out)
                (lambda (s/c)
                  (lambda ()
                    ((appendo d s res) s/c))))))))))))))

(define call-appendo
  (call/fresh
   (lambda (q)
     (call/fresh
      (lambda (l)
        (call/fresh
         (lambda (s)
           (call/fresh
            (lambda (out)
              (conj
               (appendo l s out)
               (== `(,l ,s ,out) q)))))))))))

(call/empty-state call-appendo)

(call/empty-state (call/fresh (lambda (q) (appendo '() '(a) q))))

;; Impure microKanren extensions
(define succeed (lambda (s/c) (list s/c)))
(define fail (lambda (s/c) `()))

(define (ifte g0 g1 g2)
  (lambda (s/c)
    (let loop (($ (g0 s/c)))
      (cond
        ((procedure? $) (lambda () (loop ($))))
        ((null? $) (g2 s/c))
        (else ($-append-map g1 $))))))

(define (once g)
  (lambda (s/c)
    (let loop (($ (g s/c)))
      (cond
        ((procedure? $) (lambda () (loop ($))))
        ((null? $) `())
        (else (list (car $)))))))

(define (call/project x f)
  (lambda (s/c)
    ((f (walk* x (car s/c))) s/c)))
(define (walk* v s)
  (let ((v (walk v s)))
    (cond
      ((var? v) v)
      ((pair? v) (cons (walk* (car v) s) (walk* (cdr v) s)))
      (else v))))

;; Tests of impure extensions
(call/empty-state
  (call/fresh
    (lambda (q)
      (disj
        (disj
	  (disj (== 'a 'a) (== 'a 'a))
	  (== q 'b))
	(== q 'c)))))

(call/empty-state
  (call/fresh
    (lambda (q)
      (ifte (disj (== 'a 'a) (== 'a 'a)) (== q 'b) (== q 'c)))))

(call/empty-state
  (call/fresh
    (lambda (q)
      (ifte (once (disj (== 'a 'a) (== 'a 'a))) (== q 'b) (== q 'c)))))

;; core miniKanren

;; Take & pull
(define (pull $) (if (procedure? $) (pull ($)) $))
(define (take n)
  (lambda ($)
    (cond
      ((zero? n) '())
      (else
       (let (($ (pull $)))
         (cond
           ((null? $) '())
           (else
            (cons (car $)
             ((take (- n 1)) (cdr $))))))))))

;; Reify primitives
(define (reify-var0 s/c)
  (let ((v (walk* (var 0) (car s/c))))
    (walk* v (reify-s v '()))))
(define (reify-s v s)
  (let ((v (walk v s)))
    (cond
      ((var? v)
       (let ((name (reify-name (length s))))
         (cons (cons v name) s)))
      ((pair? v) (reify-s (cdr v) (reify-s (car v) s)))
      (else s))))
(define (reify-name n)
  (string->symbol
    (string-append "_." (number->string n))))
(define (mK-reify ls)
  (map reify-var0 ls))

;; miniKanren functional helpers tests
(mK-reify ((take 3) (call/empty-state call-appendo)))

;; miniKanren macros
(define-macro (inverse-eta-delay g)
  (let ((s/c (gensym)))
    `(lambda (,s/c) (lambda () (,g ,s/c)))))

(define-macro (conj+ . g*)
  (cond
    ((null? (cdr g*)) (car g*))
    (else
     `(conj ,(car g*) (conj+ . ,(cdr g*))))))

(define-macro (disj+ . g*)
  (cond
    ((null? (cdr g*)) (car g*))
    (else
     `(disj ,(car g*) (disj+ . ,(cdr g*))))))

(define-macro (conde . g**)
  `(inverse-eta-delay (disj+ . ,(map (lambda (l) `(conj+ . ,l)) g**))))

(define-macro (fresh ls . g*)
  (cond
    ((null? ls) `(inverse-eta-delay (conj+ . ,g*)))
    (else
     `(call/fresh (lambda (,(car ls)) (fresh ,(cdr ls) . ,g*))))))

(define-macro (run n formals . g*)
  `(map reify-var0 ((take ,n) (call/empty-state (fresh ,formals . ,g*)))))

;; miniKanren macro tests
(define newpendo
  (lambda (l s/c out) ;; deliberately evil variable name
    (disj
     (conj (== '() l) (== s/c out))
     (call/fresh
      (lambda (a)
        (call/fresh
         (lambda (d)
           (conj
            (== `(,a . ,d) l)
            (call/fresh
             (lambda (res)
               (conj
                (== `(,a . ,res) out)
                (inverse-eta-delay (newpendo d s/c res)))))))))))))

(define call-newpendo
  (call/fresh
   (lambda (q)
     (call/fresh
      (lambda (l)
        (call/fresh
         (lambda (s)
           (call/fresh
            (lambda (out)
              (conj
               (== `(,l ,s ,out) q)
               (newpendo l s out)))))))))))

(mK-reify ((take 3) (call/empty-state call-newpendo)))

(call/empty-state
  (call/fresh
    (lambda (q)
      (disj+
        (== q 'cat)
	(== q 'dog)
	(== q 'horse)
	(== q 'turtle)))))

(define newpendo
  (lambda (l s/c out) ;; deliberately evil variable name
    (disj+
     (conj+ (== '() l) (== s/c out))
     (call/fresh
      (lambda (a)
        (call/fresh
         (lambda (d)
           (conj+
            (== `(,a . ,d) l)
            (call/fresh
             (lambda (res)
               (conj+
                (== `(,a . ,res) out)
                (inverse-eta-delay (newpendo d s/c res)))))))))))))

(define call-newpendo
  (call/fresh
   (lambda (q)
     (call/fresh
      (lambda (l)
        (call/fresh
         (lambda (s)
           (call/fresh
            (lambda (out)
              (conj+
               (== `(,l ,s ,out) q)
               (newpendo l s out)))))))))))

(mK-reify ((take 3) (call/empty-state call-newpendo)))

(define newpendo
  (lambda (l s/c out) ;; deliberately evil variable name
    (conde
     ((== '() l) (== s/c out))
     ((call/fresh
      (lambda (a)
        (call/fresh
         (lambda (d)
           (conj+
            (== `(,a . ,d) l)
            (call/fresh
             (lambda (res)
               (conj+
                (== `(,a . ,res) out)
                (inverse-eta-delay (newpendo d s/c res))))))))))))))

(define call-newpendo
  (call/fresh
   (lambda (q)
     (call/fresh
      (lambda (l)
        (call/fresh
         (lambda (s)
           (call/fresh
            (lambda (out)
              (conj+
               (== `(,l ,s ,out) q)
               (newpendo l s out)))))))))))

(mK-reify ((take 3) (call/empty-state call-newpendo)))

(define brand-newpendo
  (lambda (l s/c out) ;; deliberately evil variable name
    (conde
     ((== '() l) (== s/c out))
     ((fresh (a d)
        (== `(,a . ,d) l)
	(fresh (res)
          (== `(,a . ,res) out)
	  (brand-newpendo d s/c res)))))))

(define call-brand-newpendo
  (call/fresh
   (lambda (q)
     (call/fresh
      (lambda (l)
        (call/fresh
         (lambda (s)
           (call/fresh
            (lambda (out)
              (conj+
               (== `(,l ,s ,out) q)
               (brand-newpendo l s out)))))))))))

(mK-reify ((take 3) (call/empty-state call-brand-newpendo)))

(run 3 (q) (fresh (a b) (brand-newpendo a b q)))

(run 3 (q) (brand-newpendo q '(a b c) '(d e f a b c)))

;; impure miniKanren extensions
(define-macro (project formals . g*)
  (cond
    ((null? formals) `(conj+ . ,g*))
    (else
      `(call/project ,(car formals)
	 (lambda (,(car formals))
	   (project ,(cdr formals) . ,g*))))))

(define-macro (ifte* . g**)
  (cond
    ((null? (cdr g**)) `(conj+ . ,(car g**)))
    (else
      `(ifte ,(caar g**) (conj+ . ,(cdar g**)) (ifte* . ,(cdr g**))))))

(define-macro (conda . g**)
  `(inverse-eta-delay
     (ifte* . (,@(map (lambda (ls) `(,@ls . (succeed))) g**) . ((fail))))))

(define-macro (condu . g**)
  `(conda . ,(map (lambda (g*) `((once ,(car g*)) . ,(cdr g*))) g**)))

;; impure miniKanren extensions tests
(run 1 (q) (fresh (a) (== a '(cat . dog)) (project (a) (== q (pair? a)))))

(call/empty-state (ifte* ((== 'a 'a) (== 'b 'b)) ((== 'c 'c))))

((call/empty-state (conda ((== 'a 'b) (== 'c 'c)))))

(((call/empty-state (fresh (q) (conde ((== q 'a)) ((== q 'b)))))))

(((call/empty-state
  (call/fresh
    (lambda (q)
      (conda
       ((conde ((== q 'a)) ((== q 'b))) (== 'cat 'cat))
       ((== 'dog 'dog))))))))

(run -1 (q)
        (conda
          ((conde ((== q 'a)) ((== q 'b))) (== 'cat 'cat))
          ((== 'dog 'dog))))

(run -1 (q)
        (condu
          ((conde ((== q 'a)) ((== q 'b))) (== 'cat 'cat))
          ((== 'dog 'dog))))



